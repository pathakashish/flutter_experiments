name: Release flutter_experiments

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    tags:
      - 'v**'

        # A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  buildForBothAndroidAndiOS:
    # Run on macos
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '1.8'
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '1.20.2'
      # TODO Bump the version number before building
      - run: flutter pub get
      - run: flutter test
      - run: flutter build apk --debug # TODO Change it to release when we have signing certs configured
      - run: mv build/app/outputs/flutter-apk/app-debug.apk build/app/outputs/flutter-apk/flutter_experiements-debug.apk
      - uses: actions/upload-artifact@v2
        with:
          name: flutter_experiements-debug
          path: build/app/outputs/flutter-apk/flutter_experiements-debug.apk
      - run: flutter build ios --debug --no-codesign # TODO Change it to release when we have signing certs configured
      - uses: actions/upload-artifact@v2
        with:
          name: flutter_experiements.Runner.app
          path: build/ios/iphoneos/Runner.app
          # TODO figure out deployment of iOS. How to generate the .ipa file for iOS?
  deploy:
    name: Deploy to firebase
    needs: buildForBothAndroidAndiOS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: flutter_experiements-debug
      - name: UPload the APK to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: testers
          file: flutter_experiements-debug.apk
          debug: true
      - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: Release ${{ github.ref }}
            draft: false
            prerelease: false
            - name: Upload debug APK # TOOD Change this after release APK signing is added
              id: upload-release-asset
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                asset_path: ./flutter_experiements-debug.apk
                asset_name: flutter_experiements-debug.apk
                asset_content_type: application/zip
